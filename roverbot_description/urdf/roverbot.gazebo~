<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro">


	<!-- establecer los colores y material-->
	<gazebo reference="base_link"> 
	  <material>Gazebo/Silver</material> 
	</gazebo>

	<gazebo reference="frontAxle"> 
	  <material>Gazebo/Silver</material> 
	</gazebo>

	<gazebo reference="backAxle"> 
	  <material>Gazebo/Silver</material> 
	</gazebo>

	<gazebo reference="rightBackTire"> 
	  <material>Gazebo/Black</material> 
	</gazebo>

	<gazebo reference="leftBackTire"> 
	  <material>Gazebo/Black</material> 
	</gazebo>

	<gazebo reference="rightFrontTire"> 
	  <material>Gazebo/Black</material> 
	</gazebo>

	<gazebo reference="leftFrontTire"> 
	  <material>Gazebo/Black</material> 
	</gazebo>

	<gazebo reference="frontBumper"> 
	  <material>Gazebo/Grey</material> 
	</gazebo>

	<gazebo reference="BackBumper"> 
	  <material>Gazebo/Grey</material> 
	</gazebo>

	<gazebo reference="enclosure"> 
	  <material>Gazebo/Silver</material> 
	</gazebo>

	<gazebo reference="laser_link"> 
	  <material>Gazebo/Orange</material> 
	</gazebo>

	<gazebo reference="imu_link"> 
	  <material>Gazebo/Red</material> 
	</gazebo>

	<gazebo reference="gps_link"> 
	  <material>Gazebo/Yellow</material> 
	</gazebo>

	<gazebo reference="kinect_link"> 
	  <material>Gazebo/Blue</material> 
	</gazebo>

	<!-- Plugin direccion sterring -->
	<gazebo>
      		<plugin name="skid_steer_drive_controller" filename="libgazebo_ros_skid_steer_drive.so">
			<publishWheelJointState>true</publishWheelJointState>
			<updateRate>100.0</updateRate>
			<leftFrontJoint>leftFrontTire_joint</leftFrontJoint>
			<rightFrontJoint>rightFrontTire_joint</rightFrontJoint>
			<leftRearJoint>leftBackTire_joint</leftRearJoint>
			<rightRearJoint>rightBackTire_joint</rightRearJoint>
			<wheelSeparation>${AxlePositionX*2}</wheelSeparation>
			<wheelDiameter>${wheelRadius}</wheelDiameter>
			<torque>20</torque>
			<robotBaseFrame>base_link</robotBaseFrame>
	      </plugin>
	</gazebo>

	<!-- Plugin odom -->
	<gazebo>
		<plugin name="object_controller" filename="libgazebo_ros_planar_move.so">
			<commandTopic>cmd_vel</commandTopic>
			<odometryTopic>odom</odometryTopic>
			<odometryFrame>odom</odometryFrame>
			<odometryRate>10.0</odometryRate>
			<robotBaseFrame>footprint</robotBaseFrame>
		</plugin>
	</gazebo>

	<!-- Señales faltantes en  state_publisher -->
	<gazebo>
		<plugin name="joint_state_publisher" filename="libgazebo_ros_joint_state_publisher.so">
			<jointName>leftFrontTire_joint,rightFrontTire_joint,leftBackTire_joint,rightBackTire_joint</jointName>
		</plugin>
	</gazebo>

	<!-- hokuyo-->
	<gazebo reference="laser_link">
		<sensor type="ray" name="laser_sensor">
			<pose>0 0 0 0 0 0</pose>
			<visualize>true</visualize>
			<update_rate>40</update_rate>
			<ray>
				<scan>
					<horizontal>
						<samples>720</samples>
						<resolution>1</resolution>
						<min_angle>-3.14159265</min_angle>
						<max_angle>3.14159265</max_angle>
					</horizontal>
				</scan>
				<range>
					<min>0.10</min>
					<max>6.0</max>
					<resolution>0.01</resolution>
				</range>
				<noise>
					<type>gaussian</type>
					<mean>0.0</mean>
					<stddev>0.01</stddev>
				</noise>
			</ray>
			<plugin name="gpu_laser" filename="libgazebo_ros_laser.so">
				<topicName>/scan</topicName>
				<frameName>laser_link</frameName>
			</plugin>
		</sensor>
	</gazebo>

	<!-- imu-->
	<gazebo>
		<plugin name="imu_plugin" filename="libgazebo_ros_imu.so">
			<alwaysOn>true</alwaysOn>
			<bodyName>base_link</bodyName>
			<topicName>imu</topicName>
			<serviceName>imu_service</serviceName>
			<gaussianNoise>0.0</gaussianNoise>
			<updateRate>20.0</updateRate>
		</plugin>
	</gazebo>

	<!-- gps-->
	<gazebo>
		<plugin name="novatel_gps_sim" filename="libhector_gazebo_ros_gps.so">
			<alwaysOn>1</alwaysOn>
			<updateRate>10.0</updateRate>
			<bodyName>base_link</bodyName>
			<topicName>gps</topicName>
			<velocityTopicName>gps_velocity</velocityTopicName>
			<drift>5.0 5.0 5.0</drift>
			<gaussianNoise>0.1 0.1 0.1</gaussianNoise>
			<velocityDrift>0 0 0</velocityDrift>
			<velocityGaussianNoise>0.1 0.1 0.1</velocityGaussianNoise>
			<referenceLatitude>4.7110 </referenceLatitude>
			<referenceLongitude>-74.0721 </referenceLongitude>
			<referenceAltitude>2612 </referenceAltitude>
		</plugin>
	</gazebo>

	<!-- kinect -->
	<gazebo reference="kinect_link">  
		<sensor type="depth" name="kinect_sensor">
			<always_on>true</always_on>
			<update_rate>20.0</update_rate>
			<camera>
				<horizontal_fov>60.0*1/180.0</horizontal_fov>
				<image>
					<format>R8G8B8</format>
					<width>640</width>
					<height>480</height>
				</image>
				<clip>
					<near>0.05</near>
					<far>8.0</far>
				</clip>
			</camera>
			<plugin name="kinect_controller" filename="libgazebo_ros_openni_kinect.so">
				<cameraName>kinect</cameraName>
				<alwaysOn>true</alwaysOn>
				<updateRate>10</updateRate>
				<imageTopicName>rgb/image_raw</imageTopicName>
				<depthImageTopicName>depth/image_raw</depthImageTopicName>
				<pointCloudTopicName>depth/points</pointCloudTopicName>
				<cameraInfoTopicName>rgb/camera_info</cameraInfoTopicName>
				<depthImageCameraInfoTopicName>depth/camera_info</depthImageCameraInfoTopicName>
				<frameName>kinect_link</frameName>
				<baseline>0.1</baseline>
				<distortion_k1>0.0</distortion_k1>
				<distortion_k2>0.0</distortion_k2>
				<distortion_k3>0.0</distortion_k3>
				<distortion_t1>0.0</distortion_t1>
				<distortion_t2>0.0</distortion_t2>
				<pointCloudCutoff>0.4</pointCloudCutoff>
				<pointCloudCutoffMax>5.0</pointCloudCutoffMax>
			</plugin>
		</sensor>
	</gazebo>
</robot>
